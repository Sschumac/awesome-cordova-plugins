var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@awesome-cordova-plugins/core';
var DiagnosticOriginal = /** @class */ (function (_super) {
    __extends(DiagnosticOriginal, _super);
    function DiagnosticOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.permission = {
            READ_CALENDAR: 'READ_CALENDAR',
            WRITE_CALENDAR: 'WRITE_CALENDAR',
            CAMERA: 'CAMERA',
            READ_CONTACTS: 'READ_CONTACTS',
            WRITE_CONTACTS: 'WRITE_CONTACTS',
            GET_ACCOUNTS: 'GET_ACCOUNTS',
            ACCESS_FINE_LOCATION: 'ACCESS_FINE_LOCATION',
            ACCESS_COARSE_LOCATION: 'ACCESS_COARSE_LOCATION',
            RECORD_AUDIO: 'RECORD_AUDIO',
            READ_PHONE_STATE: 'READ_PHONE_STATE',
            CALL_PHONE: 'CALL_PHONE',
            ADD_VOICEMAIL: 'ADD_VOICEMAIL',
            USE_SIP: 'USE_SIP',
            PROCESS_OUTGOING_CALLS: 'PROCESS_OUTGOING_CALLS',
            READ_CALL_LOG: 'READ_CALL_LOG',
            WRITE_CALL_LOG: 'WRITE_CALL_LOG',
            SEND_SMS: 'SEND_SMS',
            RECEIVE_SMS: 'RECEIVE_SMS',
            READ_SMS: 'READ_SMS',
            RECEIVE_WAP_PUSH: 'RECEIVE_WAP_PUSH',
            RECEIVE_MMS: 'RECEIVE_MMS',
            WRITE_EXTERNAL_STORAGE: 'WRITE_EXTERNAL_STORAGE',
            READ_EXTERNAL_STORAGE: 'READ_EXTERNAL_STORAGE',
            BODY_SENSORS: 'BODY_SENSORS',
        };
        _this.locationAuthorizationMode = {
            ALWAYS: 'always',
            WHEN_IN_USE: 'when_in_use',
        };
        /**
         * Location accuracy authorization
         */
        _this.locationAccuracyAuthorization = {
            FULL: 'full',
            REDUCED: 'reduced',
        };
        _this.permissionGroups = {
            CALENDAR: ['READ_CALENDAR', 'WRITE_CALENDAR'],
            CAMERA: ['CAMERA'],
            CONTACTS: ['READ_CONTACTS', 'WRITE_CONTACTS', 'GET_ACCOUNTS'],
            LOCATION: ['ACCESS_FINE_LOCATION', 'ACCESS_COARSE_LOCATION'],
            MICROPHONE: ['RECORD_AUDIO'],
            PHONE: [
                'READ_PHONE_STATE',
                'CALL_PHONE',
                'ADD_VOICEMAIL',
                'USE_SIP',
                'PROCESS_OUTGOING_CALLS',
                'READ_CALL_LOG',
                'WRITE_CALL_LOG',
            ],
            SENSORS: ['BODY_SENSORS'],
            SMS: ['SEND_SMS', 'RECEIVE_SMS', 'READ_SMS', 'RECEIVE_WAP_PUSH', 'RECEIVE_MMS'],
            STORAGE: ['READ_EXTERNAL_STORAGE', 'WRITE_EXTERNAL_STORAGE'],
        };
        _this.locationMode = {
            HIGH_ACCURACY: 'high_accuracy',
            DEVICE_ONLY: 'device_only',
            BATTERY_SAVING: 'battery_saving',
            LOCATION_OFF: 'location_off',
        };
        _this.bluetoothState = {
            UNKNOWN: 'unknown',
            RESETTING: 'resetting',
            UNSUPPORTED: 'unsupported',
            UNAUTHORIZED: 'unauthorized',
            POWERED_OFF: 'powered_off',
            POWERED_ON: 'powered_on',
            POWERING_OFF: 'powering_off',
            POWERING_ON: 'powering_on',
        };
        /**
         * Access to the photo library (iOS 14+)
         *
         * ADD_ONLY - can add to but not read from Photo Library
         * READ_WRITE - can both add to and read from Photo Library
         *
         */
        _this.photoLibraryAccessLevel = {
            ADD_ONLY: 'add_only',
            READ_WRITE: 'read_write',
        };
        return _this;
    }
    DiagnosticOriginal.prototype.isLocationAvailable = function () { return cordova(this, "isLocationAvailable", {}, arguments); };
    DiagnosticOriginal.prototype.isWifiAvailable = function () { return cordova(this, "isWifiAvailable", {}, arguments); };
    DiagnosticOriginal.prototype.isCameraAvailable = function (externalStorage) { return cordova(this, "isCameraAvailable", { "callbackOrder": "reverse" }, arguments); };
    DiagnosticOriginal.prototype.isBluetoothAvailable = function () { return cordova(this, "isBluetoothAvailable", {}, arguments); };
    DiagnosticOriginal.prototype.switchToLocationSettings = function () { return cordova(this, "switchToLocationSettings", { "sync": true, "platforms": ["Android", "Windows 10", "iOS"] }, arguments); };
    DiagnosticOriginal.prototype.switchToMobileDataSettings = function () { return cordova(this, "switchToMobileDataSettings", { "sync": true, "platforms": ["Android", "Windows 10"] }, arguments); };
    DiagnosticOriginal.prototype.switchToBluetoothSettings = function () { return cordova(this, "switchToBluetoothSettings", { "sync": true, "platforms": ["Android", "Windows 10"] }, arguments); };
    DiagnosticOriginal.prototype.switchToWifiSettings = function () { return cordova(this, "switchToWifiSettings", { "sync": true, "platforms": ["Android", "Windows 10"] }, arguments); };
    DiagnosticOriginal.prototype.isWifiEnabled = function () { return cordova(this, "isWifiEnabled", { "platforms": ["Android", "Windows 10"] }, arguments); };
    DiagnosticOriginal.prototype.setWifiState = function (state) { return cordova(this, "setWifiState", { "callbackOrder": "reverse", "platforms": ["Android", "Windows 10"] }, arguments); };
    DiagnosticOriginal.prototype.setBluetoothState = function (state) { return cordova(this, "setBluetoothState", { "callbackOrder": "reverse", "platforms": ["Android", "Windows 10"] }, arguments); };
    DiagnosticOriginal.prototype.isLocationEnabled = function () { return cordova(this, "isLocationEnabled", { "platforms": ["Android", "iOS"] }, arguments); };
    DiagnosticOriginal.prototype.isLocationAuthorized = function () { return cordova(this, "isLocationAuthorized", {}, arguments); };
    DiagnosticOriginal.prototype.getLocationAuthorizationStatus = function () { return cordova(this, "getLocationAuthorizationStatus", { "platforms": ["Android", "iOS"] }, arguments); };
    DiagnosticOriginal.prototype.requestLocationAuthorization = function (mode, accuracy) { return cordova(this, "requestLocationAuthorization", { "platforms": ["Android", "iOS"], "callbackOrder": "reverse" }, arguments); };
    DiagnosticOriginal.prototype.isCameraPresent = function () { return cordova(this, "isCameraPresent", { "platforms": ["Android", "iOS"] }, arguments); };
    DiagnosticOriginal.prototype.isCameraAuthorized = function (externalStorage) { return cordova(this, "isCameraAuthorized", { "platforms": ["Android", "iOS"], "callbackOrder": "reverse" }, arguments); };
    DiagnosticOriginal.prototype.getCameraAuthorizationStatus = function (externalStorage) { return cordova(this, "getCameraAuthorizationStatus", { "platforms": ["Android", "iOS"], "callbackOrder": "reverse" }, arguments); };
    DiagnosticOriginal.prototype.requestCameraAuthorization = function (externalStorage) { return cordova(this, "requestCameraAuthorization", { "platforms": ["Android", "iOS"], "callbackOrder": "reverse" }, arguments); };
    DiagnosticOriginal.prototype.isMicrophoneAuthorized = function () { return cordova(this, "isMicrophoneAuthorized", { "platforms": ["Android", "iOS"] }, arguments); };
    DiagnosticOriginal.prototype.getMicrophoneAuthorizationStatus = function () { return cordova(this, "getMicrophoneAuthorizationStatus", { "platforms": ["Android", "iOS"] }, arguments); };
    DiagnosticOriginal.prototype.requestMicrophoneAuthorization = function () { return cordova(this, "requestMicrophoneAuthorization", { "platforms": ["Android", "iOS"] }, arguments); };
    DiagnosticOriginal.prototype.isContactsAuthorized = function () { return cordova(this, "isContactsAuthorized", { "platforms": ["Android", "iOS"] }, arguments); };
    DiagnosticOriginal.prototype.getContactsAuthorizationStatus = function () { return cordova(this, "getContactsAuthorizationStatus", { "platforms": ["Android", "iOS"] }, arguments); };
    DiagnosticOriginal.prototype.requestContactsAuthorization = function () { return cordova(this, "requestContactsAuthorization", { "platforms": ["Android", "iOS"] }, arguments); };
    DiagnosticOriginal.prototype.isCalendarAuthorized = function () { return cordova(this, "isCalendarAuthorized", { "platforms": ["Android", "iOS"] }, arguments); };
    DiagnosticOriginal.prototype.getCalendarAuthorizationStatus = function () { return cordova(this, "getCalendarAuthorizationStatus", { "platforms": ["Android", "iOS"] }, arguments); };
    DiagnosticOriginal.prototype.requestCalendarAuthorization = function () { return cordova(this, "requestCalendarAuthorization", { "platforms": ["Android", "iOS"] }, arguments); };
    DiagnosticOriginal.prototype.switchToSettings = function () { return cordova(this, "switchToSettings", { "platforms": ["Android", "iOS"] }, arguments); };
    DiagnosticOriginal.prototype.getBluetoothState = function () { return cordova(this, "getBluetoothState", { "platforms": ["Android", "iOS"] }, arguments); };
    DiagnosticOriginal.prototype.registerBluetoothStateChangeHandler = function (handler) { return cordova(this, "registerBluetoothStateChangeHandler", { "platforms": ["Android", "iOS"], "sync": true }, arguments); };
    DiagnosticOriginal.prototype.registerLocationStateChangeHandler = function (handler) { return cordova(this, "registerLocationStateChangeHandler", { "platforms": ["Android", "iOS"], "sync": true }, arguments); };
    DiagnosticOriginal.prototype.isGpsLocationAvailable = function () { return cordova(this, "isGpsLocationAvailable", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.isGpsLocationEnabled = function () { return cordova(this, "isGpsLocationEnabled", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.isNetworkLocationAvailable = function () { return cordova(this, "isNetworkLocationAvailable", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.isNetworkLocationEnabled = function () { return cordova(this, "isNetworkLocationEnabled", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.getLocationMode = function () { return cordova(this, "getLocationMode", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.getPermissionAuthorizationStatus = function (permission) { return cordova(this, "getPermissionAuthorizationStatus", { "platforms": ["Android"], "callbackOrder": "reverse" }, arguments); };
    DiagnosticOriginal.prototype.getPermissionsAuthorizationStatus = function (permissions) { return cordova(this, "getPermissionsAuthorizationStatus", { "platforms": ["Android"], "callbackOrder": "reverse" }, arguments); };
    DiagnosticOriginal.prototype.requestRuntimePermission = function (permission) { return cordova(this, "requestRuntimePermission", { "platforms": ["Android"], "callbackOrder": "reverse" }, arguments); };
    DiagnosticOriginal.prototype.requestRuntimePermissions = function (permissions) { return cordova(this, "requestRuntimePermissions", { "platforms": ["Android"], "callbackOrder": "reverse" }, arguments); };
    DiagnosticOriginal.prototype.isRequestingPermission = function () { return cordova(this, "isRequestingPermission", { "sync": true }, arguments); };
    DiagnosticOriginal.prototype.registerPermissionRequestCompleteHandler = function (handler) { return cordova(this, "registerPermissionRequestCompleteHandler", { "sync": true }, arguments); };
    DiagnosticOriginal.prototype.isBluetoothEnabled = function () { return cordova(this, "isBluetoothEnabled", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.hasBluetoothSupport = function () { return cordova(this, "hasBluetoothSupport", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.hasBluetoothLESupport = function () { return cordova(this, "hasBluetoothLESupport", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.hasBluetoothLEPeripheralSupport = function () { return cordova(this, "hasBluetoothLEPeripheralSupport", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.isExternalStorageAuthorized = function () { return cordova(this, "isExternalStorageAuthorized", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.getExternalStorageAuthorizationStatus = function () { return cordova(this, "getExternalStorageAuthorizationStatus", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.requestExternalStorageAuthorization = function () { return cordova(this, "requestExternalStorageAuthorization", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.getExternalSdCardDetails = function () { return cordova(this, "getExternalSdCardDetails", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.switchToWirelessSettings = function () { return cordova(this, "switchToWirelessSettings", { "platforms": ["Android"], "sync": true }, arguments); };
    DiagnosticOriginal.prototype.switchToNFCSettings = function () { return cordova(this, "switchToNFCSettings", { "platforms": ["Android"], "sync": true }, arguments); };
    DiagnosticOriginal.prototype.isNFCPresent = function () { return cordova(this, "isNFCPresent", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.isNFCEnabled = function () { return cordova(this, "isNFCEnabled", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.isNFCAvailable = function () { return cordova(this, "isNFCAvailable", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.registerNFCStateChangeHandler = function (handler) { return cordova(this, "registerNFCStateChangeHandler", { "platforms": ["Android"], "sync": true }, arguments); };
    DiagnosticOriginal.prototype.isDataRoamingEnabled = function () { return cordova(this, "isDataRoamingEnabled", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.isADBModeEnabled = function () { return cordova(this, "isADBModeEnabled", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.isDeviceRooted = function () { return cordova(this, "isDeviceRooted", { "platforms": ["Android"] }, arguments); };
    DiagnosticOriginal.prototype.isCameraRollAuthorized = function (accessLevel) { return cordova(this, "isCameraRollAuthorized", { "platforms": ["iOS"], "callbackOrder": "reverse" }, arguments); };
    DiagnosticOriginal.prototype.getCameraRollAuthorizationStatus = function (accessLevel) { return cordova(this, "getCameraRollAuthorizationStatus", { "platforms": ["iOS"], "callbackOrder": "reverse" }, arguments); };
    DiagnosticOriginal.prototype.requestCameraRollAuthorization = function (accessLevel) { return cordova(this, "requestCameraRollAuthorization", { "platforms": ["iOS"], "callbackOrder": "reverse" }, arguments); };
    DiagnosticOriginal.prototype.isRemoteNotificationsEnabled = function () { return cordova(this, "isRemoteNotificationsEnabled", { "platforms": ["iOS", "Android"] }, arguments); };
    DiagnosticOriginal.prototype.isRegisteredForRemoteNotifications = function () { return cordova(this, "isRegisteredForRemoteNotifications", { "platforms": ["iOS"] }, arguments); };
    DiagnosticOriginal.prototype.getRemoteNotificationsAuthorizationStatus = function () { return cordova(this, "getRemoteNotificationsAuthorizationStatus", { "platforms": ["iOS"] }, arguments); };
    DiagnosticOriginal.prototype.requestRemoteNotificationsAuthorization = function (types, omitRegistration) { return cordova(this, "requestRemoteNotificationsAuthorization", { "platforms": ["iOS"] }, arguments); };
    DiagnosticOriginal.prototype.getRemoteNotificationTypes = function () { return cordova(this, "getRemoteNotificationTypes", { "platforms": ["iOS"] }, arguments); };
    DiagnosticOriginal.prototype.isRemindersAuthorized = function () { return cordova(this, "isRemindersAuthorized", { "platforms": ["iOS"] }, arguments); };
    DiagnosticOriginal.prototype.getRemindersAuthorizationStatus = function () { return cordova(this, "getRemindersAuthorizationStatus", { "platforms": ["iOS"] }, arguments); };
    DiagnosticOriginal.prototype.requestRemindersAuthorization = function () { return cordova(this, "requestRemindersAuthorization", { "platforms": ["iOS"] }, arguments); };
    DiagnosticOriginal.prototype.isBackgroundRefreshAuthorized = function () { return cordova(this, "isBackgroundRefreshAuthorized", { "platforms": ["iOS"] }, arguments); };
    DiagnosticOriginal.prototype.getBackgroundRefreshStatus = function () { return cordova(this, "getBackgroundRefreshStatus", { "platforms": ["iOS"] }, arguments); };
    DiagnosticOriginal.prototype.requestBluetoothAuthorization = function () { return cordova(this, "requestBluetoothAuthorization", { "platforms": ["iOS"] }, arguments); };
    DiagnosticOriginal.prototype.isMotionAvailable = function () { return cordova(this, "isMotionAvailable", { "platforms": ["iOS"] }, arguments); };
    DiagnosticOriginal.prototype.isMotionRequestOutcomeAvailable = function () { return cordova(this, "isMotionRequestOutcomeAvailable", { "platforms": ["iOS"] }, arguments); };
    DiagnosticOriginal.prototype.requestMotionAuthorization = function () { return cordova(this, "requestMotionAuthorization", { "platforms": ["iOS"] }, arguments); };
    DiagnosticOriginal.prototype.getMotionAuthorizationStatus = function () { return cordova(this, "getMotionAuthorizationStatus", { "platforms": ["iOS"] }, arguments); };
    DiagnosticOriginal.prototype.getLocationAccuracyAuthorization = function () { return cordova(this, "getLocationAccuracyAuthorization", { "platforms": ["iOS", "Android"] }, arguments); };
    DiagnosticOriginal.prototype.requestTemporaryFullAccuracyAuthorization = function (purpose) { return cordova(this, "requestTemporaryFullAccuracyAuthorization", { "platforms": ["iOS"] }, arguments); };
    DiagnosticOriginal.prototype.registerLocationAccuracyAuthorizationChangeHandler = function (handler) { return cordova(this, "registerLocationAccuracyAuthorizationChangeHandler", { "platforms": ["iOS"], "sync": true }, arguments); };
    Object.defineProperty(DiagnosticOriginal.prototype, "permissionStatus", {
        get: function () { return cordovaPropertyGet(this, "permissionStatus"); },
        set: function (value) { cordovaPropertySet(this, "permissionStatus", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiagnosticOriginal.prototype, "NFCState", {
        get: function () { return cordovaPropertyGet(this, "NFCState"); },
        set: function (value) { cordovaPropertySet(this, "NFCState", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DiagnosticOriginal.prototype, "motionStatus", {
        get: function () { return cordovaPropertyGet(this, "motionStatus"); },
        set: function (value) { cordovaPropertySet(this, "motionStatus", value); },
        enumerable: false,
        configurable: true
    });
    DiagnosticOriginal.pluginName = "Diagnostic";
    DiagnosticOriginal.plugin = "cordova.plugins.diagnostic";
    DiagnosticOriginal.pluginRef = "cordova.plugins.diagnostic";
    DiagnosticOriginal.repo = "https://github.com/dpa99c/cordova-diagnostic-plugin";
    DiagnosticOriginal.platforms = ["Android", "iOS", "Windows"];
    return DiagnosticOriginal;
}(AwesomeCordovaNativePlugin));
var Diagnostic = new DiagnosticOriginal();
export { Diagnostic };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZGlhZ25vc3RpYy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLCtFQUFnRSxNQUFNLCtCQUErQixDQUFDOztJQXlDN0UsOEJBQTBCOzs7UUFDeEQsZ0JBQVUsR0FBRztZQUNYLGFBQWEsRUFBRSxlQUFlO1lBQzlCLGNBQWMsRUFBRSxnQkFBZ0I7WUFDaEMsTUFBTSxFQUFFLFFBQVE7WUFDaEIsYUFBYSxFQUFFLGVBQWU7WUFDOUIsY0FBYyxFQUFFLGdCQUFnQjtZQUNoQyxZQUFZLEVBQUUsY0FBYztZQUM1QixvQkFBb0IsRUFBRSxzQkFBc0I7WUFDNUMsc0JBQXNCLEVBQUUsd0JBQXdCO1lBQ2hELFlBQVksRUFBRSxjQUFjO1lBQzVCLGdCQUFnQixFQUFFLGtCQUFrQjtZQUNwQyxVQUFVLEVBQUUsWUFBWTtZQUN4QixhQUFhLEVBQUUsZUFBZTtZQUM5QixPQUFPLEVBQUUsU0FBUztZQUNsQixzQkFBc0IsRUFBRSx3QkFBd0I7WUFDaEQsYUFBYSxFQUFFLGVBQWU7WUFDOUIsY0FBYyxFQUFFLGdCQUFnQjtZQUNoQyxRQUFRLEVBQUUsVUFBVTtZQUNwQixXQUFXLEVBQUUsYUFBYTtZQUMxQixRQUFRLEVBQUUsVUFBVTtZQUNwQixnQkFBZ0IsRUFBRSxrQkFBa0I7WUFDcEMsV0FBVyxFQUFFLGFBQWE7WUFDMUIsc0JBQXNCLEVBQUUsd0JBQXdCO1lBQ2hELHFCQUFxQixFQUFFLHVCQUF1QjtZQUM5QyxZQUFZLEVBQUUsY0FBYztTQUM3QixDQUFDO1FBZ0JGLCtCQUF5QixHQUFHO1lBQzFCLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLFdBQVcsRUFBRSxhQUFhO1NBQzNCLENBQUM7UUFFRjs7V0FFRztRQUNILG1DQUE2QixHQUFHO1lBQzlCLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLFNBQVM7U0FDbkIsQ0FBQztRQUVGLHNCQUFnQixHQUFHO1lBQ2pCLFFBQVEsRUFBRSxDQUFDLGVBQWUsRUFBRSxnQkFBZ0IsQ0FBQztZQUM3QyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUM7WUFDbEIsUUFBUSxFQUFFLENBQUMsZUFBZSxFQUFFLGdCQUFnQixFQUFFLGNBQWMsQ0FBQztZQUM3RCxRQUFRLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSx3QkFBd0IsQ0FBQztZQUM1RCxVQUFVLEVBQUUsQ0FBQyxjQUFjLENBQUM7WUFDNUIsS0FBSyxFQUFFO2dCQUNMLGtCQUFrQjtnQkFDbEIsWUFBWTtnQkFDWixlQUFlO2dCQUNmLFNBQVM7Z0JBQ1Qsd0JBQXdCO2dCQUN4QixlQUFlO2dCQUNmLGdCQUFnQjthQUNqQjtZQUNELE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQztZQUN6QixHQUFHLEVBQUUsQ0FBQyxVQUFVLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxhQUFhLENBQUM7WUFDL0UsT0FBTyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsd0JBQXdCLENBQUM7U0FDN0QsQ0FBQztRQUVGLGtCQUFZLEdBQUc7WUFDYixhQUFhLEVBQUUsZUFBZTtZQUM5QixXQUFXLEVBQUUsYUFBYTtZQUMxQixjQUFjLEVBQUUsZ0JBQWdCO1lBQ2hDLFlBQVksRUFBRSxjQUFjO1NBQzdCLENBQUM7UUFFRixvQkFBYyxHQUFHO1lBQ2YsT0FBTyxFQUFFLFNBQVM7WUFDbEIsU0FBUyxFQUFFLFdBQVc7WUFDdEIsV0FBVyxFQUFFLGFBQWE7WUFDMUIsWUFBWSxFQUFFLGNBQWM7WUFDNUIsV0FBVyxFQUFFLGFBQWE7WUFDMUIsVUFBVSxFQUFFLFlBQVk7WUFDeEIsWUFBWSxFQUFFLGNBQWM7WUFDNUIsV0FBVyxFQUFFLGFBQWE7U0FDM0IsQ0FBQztRQXNCRjs7Ozs7O1dBTUc7UUFDSCw2QkFBdUIsR0FBRztZQUN4QixRQUFRLEVBQUUsVUFBVTtZQUNwQixVQUFVLEVBQUUsWUFBWTtTQUN6QixDQUFDOzs7SUFRRix3Q0FBbUI7SUFXbkIsb0NBQWU7SUFhZixzQ0FBaUIsYUFBQyxlQUF5QjtJQVczQyx5Q0FBb0I7SUFRcEIsNkNBQXdCO0lBTXhCLCtDQUEwQjtJQU0xQiw4Q0FBeUI7SUFNekIseUNBQW9CO0lBUXBCLGtDQUFhO0lBWWIsaUNBQVksYUFBQyxLQUFjO0lBWTNCLHNDQUFpQixhQUFDLEtBQWM7SUFZaEMsc0NBQWlCO0lBV2pCLHlDQUFvQjtJQVVwQixtREFBOEI7SUFhOUIsaURBQTRCLGFBQUMsSUFBYSxFQUFFLFFBQWlCO0lBVTdELG9DQUFlO0lBYWYsdUNBQWtCLGFBQUMsZUFBeUI7SUFZNUMsaURBQTRCLGFBQUMsZUFBeUI7SUFZdEQsK0NBQTBCLGFBQUMsZUFBeUI7SUFVcEQsMkNBQXNCO0lBVXRCLHFEQUFnQztJQVVoQyxtREFBOEI7SUFVOUIseUNBQW9CO0lBVXBCLG1EQUE4QjtJQVU5QixpREFBNEI7SUFnQjVCLHlDQUFvQjtJQWdCcEIsbURBQThCO0lBbUI5QixpREFBNEI7SUFZNUIscUNBQWdCO0lBVWhCLHNDQUFpQjtJQVVqQix3REFBbUMsYUFBQyxPQUFpQjtJQVFyRCx1REFBa0MsYUFBQyxPQUFpQjtJQVdwRCwyQ0FBc0I7SUFhdEIseUNBQW9CO0lBV3BCLCtDQUEwQjtJQWExQiw2Q0FBd0I7SUFVeEIsb0NBQWU7SUFZZixxREFBZ0MsYUFBQyxVQUFlO0lBWWhELHNEQUFpQyxhQUFDLFdBQWtCO0lBWXBELDZDQUF3QixhQUFDLFVBQWU7SUFZeEMsOENBQXlCLGFBQUMsV0FBa0I7SUFhNUMsMkNBQXNCO0lBV3RCLDZEQUF3QyxhQUFDLE9BQWlCO0lBVzFELHVDQUFrQjtJQVVsQix3Q0FBbUI7SUFVbkIsMENBQXFCO0lBVXJCLG9EQUErQjtJQVUvQixnREFBMkI7SUFVM0IsMERBQXFDO0lBVXJDLHdEQUFtQztJQWVuQyw2Q0FBd0I7SUFXeEIsNkNBQXdCO0lBU3hCLHdDQUFtQjtJQVFuQixpQ0FBWTtJQVdaLGlDQUFZO0lBV1osbUNBQWM7SUFlZCxrREFBNkIsYUFBQyxPQUFpQjtJQVEvQyx5Q0FBb0I7SUFVcEIscUNBQWdCO0lBVWhCLG1DQUFjO0lBbUJkLDJDQUFzQixhQUFDLFdBQW9CO0lBaUIzQyxxREFBZ0MsYUFBQyxXQUFvQjtJQW1CckQsbURBQThCLGFBQUMsV0FBb0I7SUFVbkQsaURBQTRCO0lBVTVCLHVEQUFrQztJQVdsQyw4REFBeUM7SUFZekMsNERBQXVDLGFBQUMsS0FBZ0IsRUFBRSxnQkFBMEI7SUFXcEYsK0NBQTBCO0lBVTFCLDBDQUFxQjtJQVVyQixvREFBK0I7SUFVL0Isa0RBQTZCO0lBVTdCLGtEQUE2QjtJQVU3QiwrQ0FBMEI7SUFZMUIsa0RBQTZCO0lBVTdCLHNDQUFpQjtJQVlqQixvREFBK0I7SUFZL0IsK0NBQTBCO0lBWTFCLGlEQUE0QjtJQVk1QixxREFBZ0M7SUFhaEMsOERBQXlDLGFBQUMsT0FBZTtJQVl6RCx1RUFBa0QsYUFBQyxPQUFpQjswQkExK0JwRSx3Q0FBZ0I7Ozs7OzswQkFpRWhCLGdDQUFROzs7Ozs7MEJBU1Isb0NBQVk7Ozs7Ozs7Ozs7O3FCQWpKZDtFQTBDZ0MsMEJBQTBCO1NBQTdDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBDb3Jkb3ZhUHJvcGVydHksIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvY29yZSc7XG5cbi8qKlxuICogQG5hbWUgRGlhZ25vc3RpY1xuICogQGRlc2NyaXB0aW9uXG4gKiBDaGVja3Mgd2hldGhlciBkZXZpY2UgaGFyZHdhcmUgZmVhdHVyZXMgYXJlIGVuYWJsZWQgb3IgYXZhaWxhYmxlIHRvIHRoZSBhcHAsIGUuZy4gY2FtZXJhLCBHUFMsIHdpZmlcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRGlhZ25vc3RpYyB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9kaWFnbm9zdGljL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBkaWFnbm9zdGljOiBEaWFnbm9zdGljKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiBsZXQgc3VjY2Vzc0NhbGxiYWNrID0gKGlzQXZhaWxhYmxlKSA9PiB7IGNvbnNvbGUubG9nKCdJcyBhdmFpbGFibGU/ICcgKyBpc0F2YWlsYWJsZSk7IH1cbiAqIGxldCBlcnJvckNhbGxiYWNrID0gKGUpID0+IGNvbnNvbGUuZXJyb3IoZSk7XG4gKlxuICogdGhpcy5kaWFnbm9zdGljLmlzQ2FtZXJhQXZhaWxhYmxlKCkudGhlbihzdWNjZXNzQ2FsbGJhY2spLmNhdGNoKGVycm9yQ2FsbGJhY2spO1xuICpcbiAqIHRoaXMuZGlhZ25vc3RpYy5pc0JsdWV0b290aEF2YWlsYWJsZSgpLnRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAqXG4gKlxuICogdGhpcy5kaWFnbm9zdGljLmdldEJsdWV0b290aFN0YXRlKClcbiAqICAgLnRoZW4oKHN0YXRlKSA9PiB7XG4gKiAgICAgaWYgKHN0YXRlID09IHRoaXMuZGlhZ25vc3RpYy5ibHVldG9vdGhTdGF0ZS5QT1dFUkVEX09OKXtcbiAqICAgICAgIC8vIGRvIHNvbWV0aGluZ1xuICogICAgIH0gZWxzZSB7XG4gKiAgICAgICAvLyBkbyBzb21ldGhpbmcgZWxzZVxuICogICAgIH1cbiAqICAgfSkuY2F0Y2goZSA9PiBjb25zb2xlLmVycm9yKGUpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdEaWFnbm9zdGljJyxcbiAgcGx1Z2luOiAnY29yZG92YS5wbHVnaW5zLmRpYWdub3N0aWMnLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuZGlhZ25vc3RpYycsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vZHBhOTljL2NvcmRvdmEtZGlhZ25vc3RpYy1wbHVnaW4nLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnLCAnV2luZG93cyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEaWFnbm9zdGljIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xuICBwZXJtaXNzaW9uID0ge1xuICAgIFJFQURfQ0FMRU5EQVI6ICdSRUFEX0NBTEVOREFSJyxcbiAgICBXUklURV9DQUxFTkRBUjogJ1dSSVRFX0NBTEVOREFSJyxcbiAgICBDQU1FUkE6ICdDQU1FUkEnLFxuICAgIFJFQURfQ09OVEFDVFM6ICdSRUFEX0NPTlRBQ1RTJyxcbiAgICBXUklURV9DT05UQUNUUzogJ1dSSVRFX0NPTlRBQ1RTJyxcbiAgICBHRVRfQUNDT1VOVFM6ICdHRVRfQUNDT1VOVFMnLFxuICAgIEFDQ0VTU19GSU5FX0xPQ0FUSU9OOiAnQUNDRVNTX0ZJTkVfTE9DQVRJT04nLFxuICAgIEFDQ0VTU19DT0FSU0VfTE9DQVRJT046ICdBQ0NFU1NfQ09BUlNFX0xPQ0FUSU9OJyxcbiAgICBSRUNPUkRfQVVESU86ICdSRUNPUkRfQVVESU8nLFxuICAgIFJFQURfUEhPTkVfU1RBVEU6ICdSRUFEX1BIT05FX1NUQVRFJyxcbiAgICBDQUxMX1BIT05FOiAnQ0FMTF9QSE9ORScsXG4gICAgQUREX1ZPSUNFTUFJTDogJ0FERF9WT0lDRU1BSUwnLFxuICAgIFVTRV9TSVA6ICdVU0VfU0lQJyxcbiAgICBQUk9DRVNTX09VVEdPSU5HX0NBTExTOiAnUFJPQ0VTU19PVVRHT0lOR19DQUxMUycsXG4gICAgUkVBRF9DQUxMX0xPRzogJ1JFQURfQ0FMTF9MT0cnLFxuICAgIFdSSVRFX0NBTExfTE9HOiAnV1JJVEVfQ0FMTF9MT0cnLFxuICAgIFNFTkRfU01TOiAnU0VORF9TTVMnLFxuICAgIFJFQ0VJVkVfU01TOiAnUkVDRUlWRV9TTVMnLFxuICAgIFJFQURfU01TOiAnUkVBRF9TTVMnLFxuICAgIFJFQ0VJVkVfV0FQX1BVU0g6ICdSRUNFSVZFX1dBUF9QVVNIJyxcbiAgICBSRUNFSVZFX01NUzogJ1JFQ0VJVkVfTU1TJyxcbiAgICBXUklURV9FWFRFUk5BTF9TVE9SQUdFOiAnV1JJVEVfRVhURVJOQUxfU1RPUkFHRScsXG4gICAgUkVBRF9FWFRFUk5BTF9TVE9SQUdFOiAnUkVBRF9FWFRFUk5BTF9TVE9SQUdFJyxcbiAgICBCT0RZX1NFTlNPUlM6ICdCT0RZX1NFTlNPUlMnLFxuICB9O1xuXG4gIEBDb3Jkb3ZhUHJvcGVydHkoKVxuICBwZXJtaXNzaW9uU3RhdHVzOiB7XG4gICAgR1JBTlRFRDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIGNvcmRvdmEucGx1Z2lucy5kaWFnbm9zdGljQDUuMC4wIHVzZXMgREVOSUVEX09OQ0UgdG8gdW5pZnkgREVOSUVEKiBzdGF0dXNlcyBhY3Jvc3MgaU9TL0FuZHJvaWRcbiAgICAgKi9cbiAgICBERU5JRUQ6IHN0cmluZztcbiAgICBERU5JRURfT05DRTogc3RyaW5nO1xuICAgIE5PVF9SRVFVRVNURUQ6IHN0cmluZztcbiAgICBERU5JRURfQUxXQVlTOiBzdHJpbmc7XG4gICAgUkVTVFJJQ1RFRDogc3RyaW5nO1xuICAgIEdSQU5URURfV0hFTl9JTl9VU0U6IHN0cmluZztcbiAgfTtcblxuICBsb2NhdGlvbkF1dGhvcml6YXRpb25Nb2RlID0ge1xuICAgIEFMV0FZUzogJ2Fsd2F5cycsXG4gICAgV0hFTl9JTl9VU0U6ICd3aGVuX2luX3VzZScsXG4gIH07XG5cbiAgLyoqXG4gICAqIExvY2F0aW9uIGFjY3VyYWN5IGF1dGhvcml6YXRpb25cbiAgICovXG4gIGxvY2F0aW9uQWNjdXJhY3lBdXRob3JpemF0aW9uID0ge1xuICAgIEZVTEw6ICdmdWxsJyxcbiAgICBSRURVQ0VEOiAncmVkdWNlZCcsXG4gIH07XG5cbiAgcGVybWlzc2lvbkdyb3VwcyA9IHtcbiAgICBDQUxFTkRBUjogWydSRUFEX0NBTEVOREFSJywgJ1dSSVRFX0NBTEVOREFSJ10sXG4gICAgQ0FNRVJBOiBbJ0NBTUVSQSddLFxuICAgIENPTlRBQ1RTOiBbJ1JFQURfQ09OVEFDVFMnLCAnV1JJVEVfQ09OVEFDVFMnLCAnR0VUX0FDQ09VTlRTJ10sXG4gICAgTE9DQVRJT046IFsnQUNDRVNTX0ZJTkVfTE9DQVRJT04nLCAnQUNDRVNTX0NPQVJTRV9MT0NBVElPTiddLFxuICAgIE1JQ1JPUEhPTkU6IFsnUkVDT1JEX0FVRElPJ10sXG4gICAgUEhPTkU6IFtcbiAgICAgICdSRUFEX1BIT05FX1NUQVRFJyxcbiAgICAgICdDQUxMX1BIT05FJyxcbiAgICAgICdBRERfVk9JQ0VNQUlMJyxcbiAgICAgICdVU0VfU0lQJyxcbiAgICAgICdQUk9DRVNTX09VVEdPSU5HX0NBTExTJyxcbiAgICAgICdSRUFEX0NBTExfTE9HJyxcbiAgICAgICdXUklURV9DQUxMX0xPRycsXG4gICAgXSxcbiAgICBTRU5TT1JTOiBbJ0JPRFlfU0VOU09SUyddLFxuICAgIFNNUzogWydTRU5EX1NNUycsICdSRUNFSVZFX1NNUycsICdSRUFEX1NNUycsICdSRUNFSVZFX1dBUF9QVVNIJywgJ1JFQ0VJVkVfTU1TJ10sXG4gICAgU1RPUkFHRTogWydSRUFEX0VYVEVSTkFMX1NUT1JBR0UnLCAnV1JJVEVfRVhURVJOQUxfU1RPUkFHRSddLFxuICB9O1xuXG4gIGxvY2F0aW9uTW9kZSA9IHtcbiAgICBISUdIX0FDQ1VSQUNZOiAnaGlnaF9hY2N1cmFjeScsXG4gICAgREVWSUNFX09OTFk6ICdkZXZpY2Vfb25seScsXG4gICAgQkFUVEVSWV9TQVZJTkc6ICdiYXR0ZXJ5X3NhdmluZycsXG4gICAgTE9DQVRJT05fT0ZGOiAnbG9jYXRpb25fb2ZmJyxcbiAgfTtcblxuICBibHVldG9vdGhTdGF0ZSA9IHtcbiAgICBVTktOT1dOOiAndW5rbm93bicsXG4gICAgUkVTRVRUSU5HOiAncmVzZXR0aW5nJywgLy8gaU9TXG4gICAgVU5TVVBQT1JURUQ6ICd1bnN1cHBvcnRlZCcsIC8vIGlPU1xuICAgIFVOQVVUSE9SSVpFRDogJ3VuYXV0aG9yaXplZCcsIC8vIGlPU1xuICAgIFBPV0VSRURfT0ZGOiAncG93ZXJlZF9vZmYnLFxuICAgIFBPV0VSRURfT046ICdwb3dlcmVkX29uJyxcbiAgICBQT1dFUklOR19PRkY6ICdwb3dlcmluZ19vZmYnLFxuICAgIFBPV0VSSU5HX09OOiAncG93ZXJpbmdfb24nLFxuICB9O1xuXG4gIEBDb3Jkb3ZhUHJvcGVydHkoKVxuICBORkNTdGF0ZToge1xuICAgIFVOS05PV046IHN0cmluZztcbiAgICBQT1dFUkVEX09GRjogc3RyaW5nO1xuICAgIFBPV0VSRURfT046IHN0cmluZztcbiAgICBQT1dFUklOR19PTjogc3RyaW5nO1xuICAgIFBPV0VSSU5HX09GRjogc3RyaW5nO1xuICB9O1xuXG4gIEBDb3Jkb3ZhUHJvcGVydHkoKVxuICBtb3Rpb25TdGF0dXM6IHtcbiAgICBOT1RfUkVRVUVTVEVEOiBzdHJpbmc7XG4gICAgR1JBTlRFRDogc3RyaW5nO1xuICAgIERFTklFRDogc3RyaW5nO1xuICAgIFJFU1RSSUNURUQ6IHN0cmluZztcbiAgICBOT1RfQVZBSUxBQkxFOiBzdHJpbmc7XG4gICAgTk9UX0RFVEVSTUlORUQ6IHN0cmluZztcbiAgICBVTktOT1dOOiBzdHJpbmc7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFjY2VzcyB0byB0aGUgcGhvdG8gbGlicmFyeSAoaU9TIDE0KylcbiAgICpcbiAgICogQUREX09OTFkgLSBjYW4gYWRkIHRvIGJ1dCBub3QgcmVhZCBmcm9tIFBob3RvIExpYnJhcnlcbiAgICogUkVBRF9XUklURSAtIGNhbiBib3RoIGFkZCB0byBhbmQgcmVhZCBmcm9tIFBob3RvIExpYnJhcnlcbiAgICpcbiAgICovXG4gIHBob3RvTGlicmFyeUFjY2Vzc0xldmVsID0ge1xuICAgIEFERF9PTkxZOiAnYWRkX29ubHknLFxuICAgIFJFQURfV1JJVEU6ICdyZWFkX3dyaXRlJyxcbiAgfTtcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGFwcCBpcyBhYmxlIHRvIGFjY2VzcyBkZXZpY2UgbG9jYXRpb24uXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGlzTG9jYXRpb25BdmFpbGFibGUoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIFdpZmkgaXMgY29ubmVjdGVkL2VuYWJsZWQuIE9uIGlPUyB0aGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgZGV2aWNlIGlzIGNvbm5lY3RlZCB0byBhIG5ldHdvcmsgYnkgV2lGaS4gT24gQW5kcm9pZCBhbmQgV2luZG93cyAxMCBNb2JpbGUgdGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIFdpRmkgc2V0dGluZyBpcyBzZXQgdG8gZW5hYmxlZC5cbiAgICogT24gQW5kcm9pZCB0aGlzIHJlcXVpcmVzIHBlcm1pc3Npb24uIGA8dXNlcy1wZXJtaXNzaW9uIGFuZHJvaWQ6bmFtZT1cImFuZHJvaWQucGVybWlzc2lvbi5BQ0NFU1NfV0lGSV9TVEFURVwiIC8+YFxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpc1dpZmlBdmFpbGFibGUoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBkZXZpY2UgaGFzIGEgY2FtZXJhLiBPbiBBbmRyb2lkIHRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBkZXZpY2UgaGFzIGEgY2FtZXJhLiBPbiBpT1MgdGhpcyByZXR1cm5zIHRydWUgaWYgYm90aCB0aGUgZGV2aWNlIGhhcyBhIGNhbWVyYSBBTkQgdGhlIGFwcGxpY2F0aW9uIGlzIGF1dGhvcml6ZWQgdG8gdXNlIGl0LiBPbiBXaW5kb3dzIDEwIE1vYmlsZSB0aGlzIHJldHVybnMgdHJ1ZSBpZiBib3RoIHRoZSBkZXZpY2UgaGFzIGEgcmVhci1mYWNpbmcgY2FtZXJhIEFORCB0aGVcbiAgICogYXBwbGljYXRpb24gaXMgYXV0aG9yaXplZCB0byB1c2UgaXQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2V4dGVybmFsU3RvcmFnZV0gQW5kcm9pZCBvbmx5OiBJZiB0cnVlLCBjaGVja3MgcGVybWlzc2lvbiBmb3IgUkVBRF9FWFRFUk5BTF9TVE9SQUdFIGluIGFkZGl0aW9uIHRvIENBTUVSQSBydW4tdGltZSBwZXJtaXNzaW9uLlxuICAgKiAgY29yZG92YS1wbHVnaW4tY2FtZXJhQDIuMisgcmVxdWlyZXMgYm90aCBvZiB0aGVzZSBwZXJtaXNzaW9ucy4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnIH0pXG4gIGlzQ2FtZXJhQXZhaWxhYmxlKGV4dGVybmFsU3RvcmFnZT86IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGRldmljZSBoYXMgQmx1ZXRvb3RoIGNhcGFiaWxpdGllcyBhbmQgaWYgc28gdGhhdCBCbHVldG9vdGggaXMgc3dpdGNoZWQgb24gKHNhbWUgb24gQW5kcm9pZCwgaU9TIGFuZCBXaW5kb3dzIDEwIE1vYmlsZSlcbiAgICogT24gQW5kcm9pZCB0aGlzIHJlcXVpcmVzIHBlcm1pc3Npb24gPHVzZXMtcGVybWlzc2lvbiBhbmRyb2lkOm5hbWU9XCJhbmRyb2lkLnBlcm1pc3Npb24uQkxVRVRPT1RIXCIgLz5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNCbHVldG9vdGhBdmFpbGFibGUoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGlzcGxheXMgdGhlIGRldmljZSBsb2NhdGlvbiBzZXR0aW5ncyB0byBhbGxvdyB1c2VyIHRvIGVuYWJsZSBsb2NhdGlvbiBzZXJ2aWNlcy9jaGFuZ2UgbG9jYXRpb24gbW9kZS5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSwgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnV2luZG93cyAxMCcsICdpT1MnXSB9KVxuICBzd2l0Y2hUb0xvY2F0aW9uU2V0dGluZ3MoKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBEaXNwbGF5cyBtb2JpbGUgc2V0dGluZ3MgdG8gYWxsb3cgdXNlciB0byBlbmFibGUgbW9iaWxlIGRhdGEuXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUsIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ1dpbmRvd3MgMTAnXSB9KVxuICBzd2l0Y2hUb01vYmlsZURhdGFTZXR0aW5ncygpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIERpc3BsYXlzIEJsdWV0b290aCBzZXR0aW5ncyB0byBhbGxvdyB1c2VyIHRvIGVuYWJsZSBCbHVldG9vdGguXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUsIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ1dpbmRvd3MgMTAnXSB9KVxuICBzd2l0Y2hUb0JsdWV0b290aFNldHRpbmdzKCk6IHZvaWQge31cblxuICAvKipcbiAgICogRGlzcGxheXMgV2lGaSBzZXR0aW5ncyB0byBhbGxvdyB1c2VyIHRvIGVuYWJsZSBXaUZpLlxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlLCBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdXaW5kb3dzIDEwJ10gfSlcbiAgc3dpdGNoVG9XaWZpU2V0dGluZ3MoKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIFdpRmkgc2V0dGluZyBpcyBzZXQgdG8gZW5hYmxlZCwgYW5kIGlzIHRoZSBzYW1lIGFzIGBpc1dpZmlBdmFpbGFibGUoKWBcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJywgJ1dpbmRvd3MgMTAnXSB9KVxuICBpc1dpZmlFbmFibGVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmFibGVzL2Rpc2FibGVzIFdpRmkgb24gdGhlIGRldmljZS5cbiAgICogUmVxdWlyZXMgYEFDQ0VTU19XSUZJX1NUQVRFYCBhbmQgYENIQU5HRV9XSUZJX1NUQVRFYCBwZXJtaXNzaW9ucyBvbiBBbmRyb2lkXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhdGVcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLCBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdXaW5kb3dzIDEwJ10gfSlcbiAgc2V0V2lmaVN0YXRlKHN0YXRlOiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRW5hYmxlcy9kaXNhYmxlcyBCbHVldG9vdGggb24gdGhlIGRldmljZS5cbiAgICogUmVxdWlyZXMgYEJMVUVUT09USGAgYW5kIGBCTFVFVE9PVEhfQURNSU5gIHBlcm1pc3Npb25zIG9uIEFuZHJvaWRcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBzdGF0ZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ1dpbmRvd3MgMTAnXSB9KVxuICBzZXRCbHVldG9vdGhTdGF0ZShzdGF0ZTogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gQU5EUk9JRCBBTkQgSU9TIE9OTFlcblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBkZXZpY2Ugc2V0dGluZyBmb3IgbG9jYXRpb24gaXMgb24uIE9uIEFuZHJvaWQgdGhpcyByZXR1cm5zIHRydWUgaWYgTG9jYXRpb24gTW9kZSBpcyBzd2l0Y2hlZCBvbi4gT24gaU9TIHRoaXMgcmV0dXJucyB0cnVlIGlmIExvY2F0aW9uIFNlcnZpY2VzIGlzIHN3aXRjaGVkIG9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10gfSlcbiAgaXNMb2NhdGlvbkVuYWJsZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgYXBwbGljYXRpb24gaXMgYXV0aG9yaXplZCB0byB1c2UgbG9jYXRpb24uXG4gICAqIE5vdGUgZm9yIEFuZHJvaWQ6IHRoaXMgaXMgaW50ZW5kZWQgZm9yIEFuZHJvaWQgNiAvIEFQSSAyMyBhbmQgYWJvdmUuIENhbGxpbmcgb24gQW5kcm9pZCA1IC8gQVBJIDIyIGFuZCBiZWxvdyB3aWxsIGFsd2F5cyByZXR1cm4gR1JBTlRFRCBzdGF0dXMgYXMgcGVybWlzc2lvbnMgYXJlIGFscmVhZHkgZ3JhbnRlZCBhdCBpbnN0YWxsYXRpb24gdGltZS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNMb2NhdGlvbkF1dGhvcml6ZWQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbG9jYXRpb24gYXV0aG9yaXphdGlvbiBzdGF0dXMgZm9yIHRoZSBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10gfSlcbiAgZ2V0TG9jYXRpb25BdXRob3JpemF0aW9uU3RhdHVzKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxvY2F0aW9uIGF1dGhvcml6YXRpb24gc3RhdHVzIGZvciB0aGUgYXBwbGljYXRpb24uXG4gICAqIE5vdGUgZm9yIEFuZHJvaWQ6IHRoaXMgaXMgaW50ZW5kZWQgZm9yIEFuZHJvaWQgNiAvIEFQSSAyMyBhbmQgYWJvdmUuIENhbGxpbmcgb24gQW5kcm9pZCA1IC8gQVBJIDIyIGFuZCBiZWxvdyB3aWxsIGFsd2F5cyByZXR1cm4gR1JBTlRFRCBzdGF0dXMgYXMgcGVybWlzc2lvbnMgYXJlIGFscmVhZHkgZ3JhbnRlZCBhdCBpbnN0YWxsYXRpb24gdGltZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFttb2RlXSBsb2NhdGlvbiBhdXRob3JpemF0aW9uIG1vZGU6IFwiYWx3YXlzXCIgb3IgXCJ3aGVuX2luX3VzZVwiLiBJZiBub3Qgc3BlY2lmaWVkLCBkZWZhdWx0cyB0byBcIndoZW5faW5fdXNlXCIuICh0aGlzLmxvY2F0aW9uQXV0aG9yaXphdGlvbk1vZGUpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbYWNjdXJhY3ldIHJlcXVlc3RlZCBsb2NhdGlvbiBhY2N1cmFjeTogXCJmdWxsXCIgb3IgXCJyZWR1Y2VkXCIuIElmIG5vdCBzcGVjaWZpZWQsIGRlZmF1bHRzIHRvIFwiZnVsbFwiLiAodGhpcy5sb2NhdGlvbkFjY3VyYWN5QXV0aG9yaXphdGlvbilcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyB9KVxuICByZXF1ZXN0TG9jYXRpb25BdXRob3JpemF0aW9uKG1vZGU/OiBzdHJpbmcsIGFjY3VyYWN5Pzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGNhbWVyYSBoYXJkd2FyZSBpcyBwcmVzZW50IG9uIGRldmljZS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10gfSlcbiAgaXNDYW1lcmFQcmVzZW50KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgYXBwbGljYXRpb24gaXMgYXV0aG9yaXplZCB0byB1c2UgdGhlIGNhbWVyYS5cbiAgICogTm90ZSBmb3IgQW5kcm9pZDogdGhpcyBpcyBpbnRlbmRlZCBmb3IgQW5kcm9pZCA2IC8gQVBJIDIzIGFuZCBhYm92ZS4gQ2FsbGluZyBvbiBBbmRyb2lkIDUgLyBBUEkgMjIgYW5kIGJlbG93IHdpbGwgYWx3YXlzIHJldHVybiBUUlVFIGFzIHBlcm1pc3Npb25zIGFyZSBhbHJlYWR5IGdyYW50ZWQgYXQgaW5zdGFsbGF0aW9uIHRpbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2V4dGVybmFsU3RvcmFnZV0gQW5kcm9pZCBvbmx5OiBJZiB0cnVlLCBjaGVja3MgcGVybWlzc2lvbiBmb3IgUkVBRF9FWFRFUk5BTF9TVE9SQUdFIGluIGFkZGl0aW9uIHRvIENBTUVSQSBydW4tdGltZSBwZXJtaXNzaW9uLlxuICAgKiAgY29yZG92YS1wbHVnaW4tY2FtZXJhQDIuMisgcmVxdWlyZXMgYm90aCBvZiB0aGVzZSBwZXJtaXNzaW9ucy4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyB9KVxuICBpc0NhbWVyYUF1dGhvcml6ZWQoZXh0ZXJuYWxTdG9yYWdlPzogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNhbWVyYSBhdXRob3JpemF0aW9uIHN0YXR1cyBmb3IgdGhlIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtleHRlcm5hbFN0b3JhZ2VdIEFuZHJvaWQgb25seTogSWYgdHJ1ZSwgY2hlY2tzIHBlcm1pc3Npb24gZm9yIFJFQURfRVhURVJOQUxfU1RPUkFHRSBpbiBhZGRpdGlvbiB0byBDQU1FUkEgcnVuLXRpbWUgcGVybWlzc2lvbi5cbiAgICogIGNvcmRvdmEtcGx1Z2luLWNhbWVyYUAyLjIrIHJlcXVpcmVzIGJvdGggb2YgdGhlc2UgcGVybWlzc2lvbnMuIERlZmF1bHRzIHRvIHRydWUuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLCBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScgfSlcbiAgZ2V0Q2FtZXJhQXV0aG9yaXphdGlvblN0YXR1cyhleHRlcm5hbFN0b3JhZ2U/OiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdHMgY2FtZXJhIGF1dGhvcml6YXRpb24gZm9yIHRoZSBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBbZXh0ZXJuYWxTdG9yYWdlXSBBbmRyb2lkIG9ubHk6IElmIHRydWUsIHJlcXVlc3RzIHBlcm1pc3Npb24gZm9yIFJFQURfRVhURVJOQUxfU1RPUkFHRSBpbiBhZGRpdGlvbiB0byBDQU1FUkEgcnVuLXRpbWUgcGVybWlzc2lvbi5cbiAgICogIGNvcmRvdmEtcGx1Z2luLWNhbWVyYUAyLjIrIHJlcXVpcmVzIGJvdGggb2YgdGhlc2UgcGVybWlzc2lvbnMuIERlZmF1bHRzIHRvIHRydWUuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLCBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScgfSlcbiAgcmVxdWVzdENhbWVyYUF1dGhvcml6YXRpb24oZXh0ZXJuYWxTdG9yYWdlPzogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgYXBwbGljYXRpb24gaXMgYXV0aG9yaXplZCB0byB1c2UgdGhlIG1pY3JvcGhvbmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSB9KVxuICBpc01pY3JvcGhvbmVBdXRob3JpemVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBtaWNyb3Bob25lIGF1dGhvcml6YXRpb24gc3RhdHVzIGZvciB0aGUgYXBwbGljYXRpb24uXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddIH0pXG4gIGdldE1pY3JvcGhvbmVBdXRob3JpemF0aW9uU3RhdHVzKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3RzIG1pY3JvcGhvbmUgYXV0aG9yaXphdGlvbiBmb3IgdGhlIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSB9KVxuICByZXF1ZXN0TWljcm9waG9uZUF1dGhvcml6YXRpb24oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBhcHBsaWNhdGlvbiBpcyBhdXRob3JpemVkIHRvIHVzZSBjb250YWN0cyAoYWRkcmVzcyBib29rKS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddIH0pXG4gIGlzQ29udGFjdHNBdXRob3JpemVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjb250YWN0cyBhdXRob3JpemF0aW9uIHN0YXR1cyBmb3IgdGhlIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSB9KVxuICBnZXRDb250YWN0c0F1dGhvcml6YXRpb25TdGF0dXMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdHMgY29udGFjdHMgYXV0aG9yaXphdGlvbiBmb3IgdGhlIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSB9KVxuICByZXF1ZXN0Q29udGFjdHNBdXRob3JpemF0aW9uKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgYXBwbGljYXRpb24gaXMgYXV0aG9yaXplZCB0byB1c2UgdGhlIGNhbGVuZGFyLlxuICAgKlxuICAgKiBOb3RlcyBmb3IgQW5kcm9pZDpcbiAgICogICAtIFRoaXMgaXMgaW50ZW5kZWQgZm9yIEFuZHJvaWQgNiAvIEFQSSAyMyBhbmQgYWJvdmUuIENhbGxpbmcgb24gQW5kcm9pZCA1IC8gQVBJIDIyIGFuZCBiZWxvdyB3aWxsIGFsd2F5cyByZXR1cm4gVFJVRSBhcyBwZXJtaXNzaW9ucyBhcmUgYWxyZWFkeSBncmFudGVkIGF0IGluc3RhbGxhdGlvbiB0aW1lLlxuICAgKlxuICAgKiBOb3RlcyBmb3IgaU9TOlxuICAgKiAgIC0gVGhpcyByZWxhdGVzIHRvIENhbGVuZGFyIEV2ZW50cyAobm90IENhbGVuZGFyIFJlbWluZGVycylcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddIH0pXG4gIGlzQ2FsZW5kYXJBdXRob3JpemVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjYWxlbmRhciBhdXRob3JpemF0aW9uIHN0YXR1cyBmb3IgdGhlIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBOb3RlcyBmb3IgQW5kcm9pZDpcbiAgICogICAtIFRoaXMgaXMgaW50ZW5kZWQgZm9yIEFuZHJvaWQgNiAvIEFQSSAyMyBhbmQgYWJvdmUuIENhbGxpbmcgb24gQW5kcm9pZCA1IC8gQVBJIDIyIGFuZCBiZWxvdyB3aWxsIGFsd2F5cyByZXR1cm4gYEdSQU5URURgIHN0YXR1cyBhcyBwZXJtaXNzaW9ucyBhcmUgYWxyZWFkeSBncmFudGVkIGF0IGluc3RhbGxhdGlvbiB0aW1lLlxuICAgKlxuICAgKiBOb3RlcyBmb3IgaU9TOlxuICAgKiAgIC0gVGhpcyByZWxhdGVzIHRvIENhbGVuZGFyIEV2ZW50cyAobm90IENhbGVuZGFyIFJlbWluZGVycylcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10gfSlcbiAgZ2V0Q2FsZW5kYXJBdXRob3JpemF0aW9uU3RhdHVzKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3RzIGNhbGVuZGFyIGF1dGhvcml6YXRpb24gZm9yIHRoZSBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogTm90ZXMgZm9yIGlPUzpcbiAgICogICAtIFNob3VsZCBvbmx5IGJlIGNhbGxlZCBpZiBhdXRob3JpemF0aW9uIHN0YXR1cyBpcyBOT1RfREVURVJNSU5FRC4gQ2FsbGluZyBpdCB3aGVuIGluIGFueSBvdGhlciBzdGF0ZSB3aWxsIGhhdmUgbm8gZWZmZWN0IGFuZCBqdXN0IHJldHVybiB0aGUgY3VycmVudCBhdXRob3JpemF0aW9uIHN0YXR1cy5cbiAgICogICAtIFRoaXMgcmVsYXRlcyB0byBDYWxlbmRhciBFdmVudHMgKG5vdCBDYWxlbmRhciBSZW1pbmRlcnMpXG4gICAqXG4gICAqIE5vdGVzIGZvciBBbmRyb2lkOlxuICAgKiAgIC0gVGhpcyBpcyBpbnRlbmRlZCBmb3IgQW5kcm9pZCA2IC8gQVBJIDIzIGFuZCBhYm92ZS4gQ2FsbGluZyBvbiBBbmRyb2lkIDUgLyBBUEkgMjIgYW5kIGJlbG93IHdpbGwgaGF2ZSBubyBlZmZlY3QgYXMgdGhlIHBlcm1pc3Npb25zIGFyZSBhbHJlYWR5IGdyYW50ZWQgYXQgaW5zdGFsbGF0aW9uIHRpbWUuXG4gICAqICAgLSBUaGlzIHJlcXVlc3RzIHBlcm1pc3Npb24gZm9yIGBSRUFEX0NBTEVOREFSYCBydW4tdGltZSBwZXJtaXNzaW9uXG4gICAqICAgLSBSZXF1aXJlZCBwZXJtaXNzaW9ucyBtdXN0IGJlIGFkZGVkIHRvIGBBbmRyb2lkTWFuaWZlc3QueG1sYCBhcyBhcHByb3ByaWF0ZSAtIHNlZSBBbmRyb2lkIHBlcm1pc3Npb25zOiBgUkVBRF9DQUxFTkRBUmAsIGBXUklURV9DQUxFTkRBUmBcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10gfSlcbiAgcmVxdWVzdENhbGVuZGFyQXV0aG9yaXphdGlvbigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyBzZXR0aW5ncyBwYWdlIGZvciB0aGlzIGFwcC5cbiAgICogT24gQW5kcm9pZCwgdGhpcyBvcGVucyB0aGUgXCJBcHAgSW5mb1wiIHBhZ2UgaW4gdGhlIFNldHRpbmdzIGFwcC5cbiAgICogT24gaU9TLCB0aGlzIG9wZW5zIHRoZSBhcHAgc2V0dGluZ3MgcGFnZSBpbiB0aGUgU2V0dGluZ3MgYXBwLiBUaGlzIHdvcmtzIG9ubHkgb24gaU9TIDgrIC0gaU9TIDcgYW5kIGJlbG93IHdpbGwgaW52b2tlIHRoZSBlcnJvckNhbGxiYWNrLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSB9KVxuICBzd2l0Y2hUb1NldHRpbmdzKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0YXRlIG9mIEJsdWV0b290aCBvbiB0aGUgZGV2aWNlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSB9KVxuICBnZXRCbHVldG9vdGhTdGF0ZSgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiBhIGNoYW5nZSBpbiBCbHVldG9vdGggc3RhdGUgb2NjdXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLCBzeW5jOiB0cnVlIH0pXG4gIHJlZ2lzdGVyQmx1ZXRvb3RoU3RhdGVDaGFuZ2VIYW5kbGVyKGhhbmRsZXI6IEZ1bmN0aW9uKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiBhIGNoYW5nZSBpbiBMb2NhdGlvbiBzdGF0ZSBvY2N1cnMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sIHN5bmM6IHRydWUgfSlcbiAgcmVnaXN0ZXJMb2NhdGlvblN0YXRlQ2hhbmdlSGFuZGxlcihoYW5kbGVyOiBGdW5jdGlvbik6IHZvaWQge31cblxuICAvLyBBTkRST0lEIE9OTFlcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGhpZ2gtYWNjdXJhY3kgbG9jYXRpb25zIGFyZSBhdmFpbGFibGUgdG8gdGhlIGFwcCBmcm9tIEdQUyBoYXJkd2FyZS5cbiAgICogUmV0dXJucyB0cnVlIGlmIExvY2F0aW9uIG1vZGUgaXMgZW5hYmxlZCBhbmQgaXMgc2V0IHRvIFwiRGV2aWNlIG9ubHlcIiBvciBcIkhpZ2ggYWNjdXJhY3lcIiBBTkQgaWYgdGhlIGFwcCBpcyBhdXRob3JpemVkIHRvIHVzZSBsb2NhdGlvbi5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJ10gfSlcbiAgaXNHcHNMb2NhdGlvbkF2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGxvY2F0aW9uIG1vZGUgaXMgc2V0IHRvIHJldHVybiBoaWdoLWFjY3VyYWN5IGxvY2F0aW9ucyBmcm9tIEdQUyBoYXJkd2FyZS5cbiAgICogICBSZXR1cm5zIHRydWUgaWYgTG9jYXRpb24gbW9kZSBpcyBlbmFibGVkIGFuZCBpcyBzZXQgdG8gZWl0aGVyOlxuICAgKiAgIC0gRGV2aWNlIG9ubHkgPSBHUFMgaGFyZHdhcmUgb25seSAoaGlnaCBhY2N1cmFjeSlcbiAgICogICAtIEhpZ2ggYWNjdXJhY3kgPSBHUFMgaGFyZHdhcmUsIG5ldHdvcmsgdHJpYW5ndWxhdGlvbiBhbmQgV2lmaSBuZXR3b3JrIElEcyAoaGlnaCBhbmQgbG93IGFjY3VyYWN5KVxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddIH0pXG4gIGlzR3BzTG9jYXRpb25FbmFibGVkKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBsb3ctYWNjdXJhY3kgbG9jYXRpb25zIGFyZSBhdmFpbGFibGUgdG8gdGhlIGFwcCBmcm9tIG5ldHdvcmsgdHJpYW5ndWxhdGlvbi9XaUZpIGFjY2VzcyBwb2ludHMuXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBMb2NhdGlvbiBtb2RlIGlzIGVuYWJsZWQgYW5kIGlzIHNldCB0byBcIkJhdHRlcnkgc2F2aW5nXCIgb3IgXCJIaWdoIGFjY3VyYWN5XCIgQU5EIGlmIHRoZSBhcHAgaXMgYXV0aG9yaXplZCB0byB1c2UgbG9jYXRpb24uXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJ10gfSlcbiAgaXNOZXR3b3JrTG9jYXRpb25BdmFpbGFibGUoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGxvY2F0aW9uIG1vZGUgaXMgc2V0IHRvIHJldHVybiBsb3ctYWNjdXJhY3kgbG9jYXRpb25zIGZyb20gbmV0d29yayB0cmlhbmd1bGF0aW9uL1dpRmkgYWNjZXNzIHBvaW50cy5cbiAgICogUmV0dXJucyB0cnVlIGlmIExvY2F0aW9uIG1vZGUgaXMgZW5hYmxlZCBhbmQgaXMgc2V0IHRvIGVpdGhlcjpcbiAgICogICAtIEJhdHRlcnkgc2F2aW5nID0gbmV0d29yayB0cmlhbmd1bGF0aW9uIGFuZCBXaWZpIG5ldHdvcmsgSURzIChsb3cgYWNjdXJhY3kpXG4gICAqICAgLSBIaWdoIGFjY3VyYWN5ID0gR1BTIGhhcmR3YXJlLCBuZXR3b3JrIHRyaWFuZ3VsYXRpb24gYW5kIFdpZmkgbmV0d29yayBJRHMgKGhpZ2ggYW5kIGxvdyBhY2N1cmFjeSlcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSB9KVxuICBpc05ldHdvcmtMb2NhdGlvbkVuYWJsZWQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBsb2NhdGlvbiBtb2RlIHNldHRpbmcgZm9yIHRoZSBkZXZpY2UuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJ10gfSlcbiAgZ2V0TG9jYXRpb25Nb2RlKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgYXV0aG9yaXphdGlvbiBzdGF0dXMgZm9yIGEgZ2l2ZW4gcGVybWlzc2lvbi5cbiAgICogTm90ZTogdGhpcyBpcyBpbnRlbmRlZCBmb3IgQW5kcm9pZCA2IC8gQVBJIDIzIGFuZCBhYm92ZS4gQ2FsbGluZyBvbiBBbmRyb2lkIDUgLyBBUEkgMjIgYW5kIGJlbG93IHdpbGwgYWx3YXlzIHJldHVybiBHUkFOVEVEIHN0YXR1cyBhcyBwZXJtaXNzaW9ucyBhcmUgYWxyZWFkeSBncmFudGVkIGF0IGluc3RhbGxhdGlvbiB0aW1lLlxuICAgKlxuICAgKiBAcGFyYW0gcGVybWlzc2lvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLCBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScgfSlcbiAgZ2V0UGVybWlzc2lvbkF1dGhvcml6YXRpb25TdGF0dXMocGVybWlzc2lvbjogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBhdXRob3JpemF0aW9uIHN0YXR1cyBmb3IgbXVsdGlwbGUgcGVybWlzc2lvbnMuXG4gICAqIE5vdGU6IHRoaXMgaXMgaW50ZW5kZWQgZm9yIEFuZHJvaWQgNiAvIEFQSSAyMyBhbmQgYWJvdmUuIENhbGxpbmcgb24gQW5kcm9pZCA1IC8gQVBJIDIyIGFuZCBiZWxvdyB3aWxsIGFsd2F5cyByZXR1cm4gR1JBTlRFRCBzdGF0dXMgYXMgcGVybWlzc2lvbnMgYXJlIGFscmVhZHkgZ3JhbnRlZCBhdCBpbnN0YWxsYXRpb24gdGltZS5cbiAgICpcbiAgICogQHBhcmFtIHthbnlbXX0gcGVybWlzc2lvbnNcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSwgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnIH0pXG4gIGdldFBlcm1pc3Npb25zQXV0aG9yaXphdGlvblN0YXR1cyhwZXJtaXNzaW9uczogYW55W10pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0cyBhcHAgdG8gYmUgZ3JhbnRlZCBhdXRob3JpemF0aW9uIGZvciBhIHJ1bnRpbWUgcGVybWlzc2lvbi5cbiAgICogTm90ZTogdGhpcyBpcyBpbnRlbmRlZCBmb3IgQW5kcm9pZCA2IC8gQVBJIDIzIGFuZCBhYm92ZS4gQ2FsbGluZyBvbiBBbmRyb2lkIDUgLyBBUEkgMjIgYW5kIGJlbG93IHdpbGwgaGF2ZSBubyBlZmZlY3QgYXMgdGhlIHBlcm1pc3Npb25zIGFyZSBhbHJlYWR5IGdyYW50ZWQgYXQgaW5zdGFsbGF0aW9uIHRpbWUuXG4gICAqXG4gICAqIEBwYXJhbSBwZXJtaXNzaW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJ10sIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyB9KVxuICByZXF1ZXN0UnVudGltZVBlcm1pc3Npb24ocGVybWlzc2lvbjogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdHMgYXBwIHRvIGJlIGdyYW50ZWQgYXV0aG9yaXphdGlvbiBmb3IgbXVsdGlwbGUgcnVudGltZSBwZXJtaXNzaW9ucy5cbiAgICogTm90ZTogdGhpcyBpcyBpbnRlbmRlZCBmb3IgQW5kcm9pZCA2IC8gQVBJIDIzIGFuZCBhYm92ZS4gQ2FsbGluZyBvbiBBbmRyb2lkIDUgLyBBUEkgMjIgYW5kIGJlbG93IHdpbGwgYWx3YXlzIHJldHVybiBHUkFOVEVEIHN0YXR1cyBhcyBwZXJtaXNzaW9ucyBhcmUgYWxyZWFkeSBncmFudGVkIGF0IGluc3RhbGxhdGlvbiB0aW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge2FueVtdfSBwZXJtaXNzaW9uc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLCBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScgfSlcbiAgcmVxdWVzdFJ1bnRpbWVQZXJtaXNzaW9ucyhwZXJtaXNzaW9uczogYW55W10pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgdGhlIHBsdWdpbiBpcyBjdXJyZW50bHkgcmVxdWVzdGluZyBhIHJ1bnRpbWUgcGVybWlzc2lvbiB2aWEgdGhlIG5hdGl2ZSBBUEkuXG4gICAqIE5vdGUgdGhhdCBvbmx5IG9uZSByZXF1ZXN0IGNhbiBiZSBtYWRlIGNvbmN1cnJlbnRseSBiZWNhdXNlIHRoZSBuYXRpdmUgQVBJIGNhbm5vdCBoYW5kbGUgY29uY3VycmVudCByZXF1ZXN0cyxcbiAgICogc28gdGhlIHBsdWdpbiB3aWxsIGludm9rZSB0aGUgZXJyb3IgY2FsbGJhY2sgaWYgYXR0ZW1wdGluZyB0byBtYWtlIG1vcmUgdGhhbiBvbmUgc2ltdWx0YW5lb3VzIHJlcXVlc3QuXG4gICAqIE11bHRpcGxlIHBlcm1pc3Npb24gcmVxdWVzdHMgc2hvdWxkIGJlIGdyb3VwZWQgaW50byBhIHNpbmdsZSBjYWxsIHNpbmNlIHRoZSBuYXRpdmUgQVBJIGlzIHNldHVwIHRvIGhhbmRsZSBiYXRjaCByZXF1ZXN0cyBvZiBtdWx0aXBsZSBwZXJtaXNzaW9uIGdyb3Vwcy5cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgaXNSZXF1ZXN0aW5nUGVybWlzc2lvbigpOiBib29sZWFuIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gYSBydW50aW1lIHBlcm1pc3Npb24gcmVxdWVzdCBoYXMgY29tcGxldGVkLlxuICAgKiBQYXNzIGluIGEgZmFsc3kgdmFsdWUgdG8gZGUtcmVnaXN0ZXIgdGhlIGN1cnJlbnRseSByZWdpc3RlcmVkIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgcmVnaXN0ZXJQZXJtaXNzaW9uUmVxdWVzdENvbXBsZXRlSGFuZGxlcihoYW5kbGVyOiBGdW5jdGlvbik6IHZvaWQge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGRldmljZSBzZXR0aW5nIGZvciBCbHVldG9vdGggaXMgc3dpdGNoZWQgb24uXG4gICAqIFRoaXMgcmVxdWlyZXMgYEJMVUVUT09USGAgcGVybWlzc2lvbiBvbiBBbmRyb2lkXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddIH0pXG4gIGlzQmx1ZXRvb3RoRW5hYmxlZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBkZXZpY2UgaGFzIEJsdWV0b290aCBjYXBhYmlsaXRpZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddIH0pXG4gIGhhc0JsdWV0b290aFN1cHBvcnQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgZGV2aWNlIGhhcyBCbHVldG9vdGggTG93IEVuZXJneSAoTEUpIGNhcGFiaWxpdGllcy5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJ10gfSlcbiAgaGFzQmx1ZXRvb3RoTEVTdXBwb3J0KCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGRldmljZSBzdXBwb3J0cyBCbHVldG9vdGggTG93IEVuZXJneSAoTEUpIFBlcmlwaGVyYWwgbW9kZS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJ10gfSlcbiAgaGFzQmx1ZXRvb3RoTEVQZXJpcGhlcmFsU3VwcG9ydCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBhcHBsaWNhdGlvbiBpcyBhdXRob3JpemVkIHRvIHVzZSBleHRlcm5hbCBzdG9yYWdlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSB9KVxuICBpc0V4dGVybmFsU3RvcmFnZUF1dGhvcml6ZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENSZXR1cm5zIHRoZSBleHRlcm5hbCBzdG9yYWdlIGF1dGhvcml6YXRpb24gc3RhdHVzIGZvciB0aGUgYXBwbGljYXRpb24uXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddIH0pXG4gIGdldEV4dGVybmFsU3RvcmFnZUF1dGhvcml6YXRpb25TdGF0dXMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdHMgZXh0ZXJuYWwgc3RvcmFnZSBhdXRob3JpemF0aW9uIGZvciB0aGUgYXBwbGljYXRpb24uXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJ10gfSlcbiAgcmVxdWVzdEV4dGVybmFsU3RvcmFnZUF1dGhvcml6YXRpb24oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBkZXRhaWxzIG9mIGV4dGVybmFsIFNEIGNhcmQocyk6IGFic29sdXRlIHBhdGgsIGlzIHdyaXRhYmxlLCBmcmVlIHNwYWNlLlxuICAgKlxuICAgKiBUaGUgaW50ZW50aW9uIG9mIHRoaXMgbWV0aG9kIGlzIHRvIHJldHVybiB0aGUgbG9jYXRpb24gYW5kIGRldGFpbHMgb2YgcmVtb3ZhYmxlIGV4dGVybmFsIFNEIGNhcmRzLlxuICAgKiBUaGlzIGRpZmZlcnMgZnJvbSB0aGUgXCJleHRlcm5hbCBkaXJlY3Rvcmllc1wiIHJldHVybmVkIGJ5IGNvcmRvdmEtcGx1Z2luLWZpbGUgd2hpY2ggcmV0dXJuIG1vdW50IHBvaW50cyByZWxhdGluZyB0byBub24tcmVtb3ZhYmxlIChpbnRlcm5hbCkgc3RvcmFnZS5cbiAgICpcbiAgICogTGVhcm4gbW9yZSBhYm91dCB0aGlzIG1ldGhvZCBbaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL2RwYTk5Yy9jb3Jkb3ZhLWRpYWdub3N0aWMtcGx1Z2luI2dldGV4dGVybmFsc2RjYXJkZGV0YWlscylcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSB9KVxuICBnZXRFeHRlcm5hbFNkQ2FyZERldGFpbHMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3dpdGNoZXMgdG8gdGhlIHdpcmVsZXNzIHNldHRpbmdzIHBhZ2UgaW4gdGhlIFNldHRpbmdzIGFwcC4gQWxsb3dzIGNvbmZpZ3VyYXRpb24gb2Ygd2lyZWxlc3MgY29udHJvbHMgc3VjaCBhcyBXaS1GaSwgQmx1ZXRvb3RoIGFuZCBNb2JpbGUgbmV0d29ya3MuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSxcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICBzd2l0Y2hUb1dpcmVsZXNzU2V0dGluZ3MoKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBEaXNwbGF5cyBORkMgc2V0dGluZ3MgdG8gYWxsb3cgdXNlciB0byBlbmFibGUgTkZDLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHBsYXRmb3JtczogWydBbmRyb2lkJ10sXG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgc3dpdGNoVG9ORkNTZXR0aW5ncygpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBORkMgaGFyZHdhcmUgaXMgcHJlc2VudCBvbiBkZXZpY2UuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddIH0pXG4gIGlzTkZDUHJlc2VudCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBkZXZpY2Ugc2V0dGluZyBmb3IgTkZDIGlzIHN3aXRjaGVkIG9uLlxuICAgKiBOb3RlOiB0aGlzIG9wZXJhdGlvbiBkb2VzIG5vdCByZXF1aXJlIE5GQyBwZXJtaXNzaW9uIGluIHRoZSBtYW5pZmVzdC5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJ10gfSlcbiAgaXNORkNFbmFibGVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgTkZDIGlzIGF2YWlsYWJsZSB0byB0aGUgYXBwLiBSZXR1cm5zIHRydWUgaWYgdGhlIGRldmljZSBoYXMgTkZDIGNhcGFiaWxpdGllcyBBTkQgaWYgTkZDIHNldHRpbmcgaXMgc3dpdGNoZWQgb24uXG4gICAqIE5vdGU6IHRoaXMgb3BlcmF0aW9uIGRvZXMgbm90IHJlcXVpcmUgTkZDIHBlcm1pc3Npb24gaW4gdGhlIG1hbmlmZXN0LlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddIH0pXG4gIGlzTkZDQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiBhIGNoYW5nZSBpbiBORkMgc3RhdGUgb2NjdXJzLiBQYXNzIGluIGEgZmFsc3kgdmFsdWUgdG8gZGUtcmVnaXN0ZXIgdGhlIGN1cnJlbnRseSByZWdpc3RlcmVkIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kZXIgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gTkZDIHN0YXRlIGNoYW5nZXNcbiAgICogQHBhcmFtIGhhbmRsZXJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLFxuICAgIHN5bmM6IHRydWUsXG4gIH0pXG4gIHJlZ2lzdGVyTkZDU3RhdGVDaGFuZ2VIYW5kbGVyKGhhbmRsZXI6IEZ1bmN0aW9uKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGRldmljZSBkYXRhIHJvYW1pbmcgc2V0dGluZyBpcyBlbmFibGVkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSB9KVxuICBpc0RhdGFSb2FtaW5nRW5hYmxlZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBkZXZpY2Ugc2V0dGluZyBmb3IgQURCKGRlYnVnKSBpcyBzd2l0Y2hlZCBvbi5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydBbmRyb2lkJ10gfSlcbiAgaXNBREJNb2RlRW5hYmxlZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBkZXZpY2UgaXMgcm9vdGVkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSB9KVxuICBpc0RldmljZVJvb3RlZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBJT1MgT05MWVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGFwcGxpY2F0aW9uIGlzIGF1dGhvcml6ZWQgdG8gdXNlIHRoZSBDYW1lcmEgUm9sbCBpbiBQaG90b3MgYXBwLlxuICAgKlxuICAgKiBAcGFyYW0gYWNjZXNzTGV2ZWwgLSAob3B0aW9uYWwpIE9uIGlPUyAxNCssIHNwZWNpZmllcyB0aGUgbGV2ZWwgb2YgYWNjZXNzIHRvIHRoZSBwaG90byBsaWJyYXJ5IHRvIHF1ZXJ5IGFzIGEgY29uc3RhbnQgaW4gY29yZG92YS5wbHVnaW5zLmRpYWdub3N0aWMucGhvdG9MaWJyYXJ5QWNjZXNzTGV2ZWxgXG4gICAqIFBvc3NpYmxlIHZhbHVlcyBhcmU6XG4gICAqIEFERF9PTkxZIC0gY2FuIGFkZCB0byBidXQgbm90IHJlYWQgZnJvbSBQaG90byBMaWJyYXJ5XG4gICAqIFJFQURfV1JJVEUgLSBjYW4gYm90aCBhZGQgdG8gYW5kIHJlYWQgZnJvbSBQaG90byBMaWJyYXJ5XG4gICAqIERlZmF1bHRzIHRvIEFERF9PTkxZIGlmIG5vdCBzcGVjaWZpZWRcbiAgICogSGFzIG5vIGVmZmVjdCBvbiBpT1MgMTMgb3IgYmVsb3dcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydpT1MnXSwgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnIH0pXG4gIGlzQ2FtZXJhUm9sbEF1dGhvcml6ZWQoYWNjZXNzTGV2ZWw/OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYXV0aG9yaXphdGlvbiBzdGF0dXMgZm9yIHRoZSBhcHBsaWNhdGlvbiB0byB1c2UgdGhlIENhbWVyYSBSb2xsIGluIFBob3RvcyBhcHAuXG4gICAqXG4gICAqIEBwYXJhbSBhY2Nlc3NMZXZlbCAtIChvcHRpb25hbCkgT24gaU9TIDE0Kywgc3BlY2lmaWVzIHRoZSBsZXZlbCBvZiBhY2Nlc3MgdG8gdGhlIHBob3RvIGxpYnJhcnkgdG8gcXVlcnkgYXMgYSBjb25zdGFudCBpbiBjb3Jkb3ZhLnBsdWdpbnMuZGlhZ25vc3RpYy5waG90b0xpYnJhcnlBY2Nlc3NMZXZlbGBcbiAgICogUG9zc2libGUgdmFsdWVzIGFyZTpcbiAgICogQUREX09OTFkgLSBjYW4gYWRkIHRvIGJ1dCBub3QgcmVhZCBmcm9tIFBob3RvIExpYnJhcnlcbiAgICogUkVBRF9XUklURSAtIGNhbiBib3RoIGFkZCB0byBhbmQgcmVhZCBmcm9tIFBob3RvIExpYnJhcnlcbiAgICogRGVmYXVsdHMgdG8gQUREX09OTFkgaWYgbm90IHNwZWNpZmllZFxuICAgKiBIYXMgbm8gZWZmZWN0IG9uIGlPUyAxMyBvciBiZWxvd1xuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJ10sIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyB9KVxuICBnZXRDYW1lcmFSb2xsQXV0aG9yaXphdGlvblN0YXR1cyhhY2Nlc3NMZXZlbD86IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3RzIGNhbWVyYSByb2xsIGF1dGhvcml6YXRpb24gZm9yIHRoZSBhcHBsaWNhdGlvbi5cbiAgICogU2hvdWxkIG9ubHkgYmUgY2FsbGVkIGlmIGF1dGhvcml6YXRpb24gc3RhdHVzIGlzIE5PVF9SRVFVRVNURUQuXG4gICAqIENhbGxpbmcgaXQgd2hlbiBpbiBhbnkgb3RoZXIgc3RhdGUgd2lsbCBoYXZlIG5vIGVmZmVjdC5cbiAgICpcbiAgICogQHBhcmFtIGFjY2Vzc0xldmVsIC0gKG9wdGlvbmFsKSBPbiBpT1MgMTQrLCBzcGVjaWZpZXMgdGhlIGxldmVsIG9mIGFjY2VzcyB0byB0aGUgcGhvdG8gbGlicmFyeSB0byBxdWVyeSBhcyBhIGNvbnN0YW50IGluIGNvcmRvdmEucGx1Z2lucy5kaWFnbm9zdGljLnBob3RvTGlicmFyeUFjY2Vzc0xldmVsYFxuICAgKiBQb3NzaWJsZSB2YWx1ZXMgYXJlOlxuICAgKiBBRERfT05MWSAtIGNhbiBhZGQgdG8gYnV0IG5vdCByZWFkIGZyb20gUGhvdG8gTGlicmFyeVxuICAgKiBSRUFEX1dSSVRFIC0gY2FuIGJvdGggYWRkIHRvIGFuZCByZWFkIGZyb20gUGhvdG8gTGlicmFyeVxuICAgKiBEZWZhdWx0cyB0byBBRERfT05MWSBpZiBub3Qgc3BlY2lmaWVkXG4gICAqIEhhcyBubyBlZmZlY3Qgb24gaU9TIDEzIG9yIGJlbG93XG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydpT1MnXSwgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnIH0pXG4gIHJlcXVlc3RDYW1lcmFSb2xsQXV0aG9yaXphdGlvbihhY2Nlc3NMZXZlbD86IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiByZW1vdGUgKHB1c2gpIG5vdGlmaWNhdGlvbnMgYXJlIGVuYWJsZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJywgJ0FuZHJvaWQnXSB9KVxuICBpc1JlbW90ZU5vdGlmaWNhdGlvbnNFbmFibGVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGFwcCBpcyByZWdpc3RlcmVkIGZvciByZW1vdGUgKHB1c2gpIG5vdGlmaWNhdGlvbnMgb24gdGhlIGRldmljZS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydpT1MnXSB9KVxuICBpc1JlZ2lzdGVyZWRGb3JSZW1vdGVOb3RpZmljYXRpb25zKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhdXRob3JpemF0aW9uIHN0YXR1cyBmb3IgdGhlIGFwcGxpY2F0aW9uIHRvIHVzZSBSZW1vdGUgTm90aWZpY2F0aW9ucy5cbiAgICogTm90ZTogV29ya3Mgb24gaU9TIDEwKyBvbmx5IChpT1MgOSBhbmQgYmVsb3cgd2lsbCBpbnZva2UgdGhlIGVycm9yIGNhbGxiYWNrKS5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ2lPUyddIH0pXG4gIGdldFJlbW90ZU5vdGlmaWNhdGlvbnNBdXRob3JpemF0aW9uU3RhdHVzKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3RzIHJlbWluZGVycyBhdXRob3JpemF0aW9uIGZvciB0aGUgYXBwbGljYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB0eXBlc1xuICAgKiBAcGFyYW0gb21pdFJlZ2lzdHJhdGlvblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJ10gfSlcbiAgcmVxdWVzdFJlbW90ZU5vdGlmaWNhdGlvbnNBdXRob3JpemF0aW9uKHR5cGVzPzogc3RyaW5nW10sIG9taXRSZWdpc3RyYXRpb24/OiBib29sZWFuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogSW5kaWNhdGVzIHRoZSBjdXJyZW50IHNldHRpbmcgb2Ygbm90aWZpY2F0aW9uIHR5cGVzIGZvciB0aGUgYXBwIGluIHRoZSBTZXR0aW5ncyBhcHAuXG4gICAqIE5vdGU6IG9uIGlPUyA4KywgaWYgXCJBbGxvdyBOb3RpZmljYXRpb25zXCIgc3dpdGNoIGlzIE9GRiwgYWxsIHR5cGVzIHdpbGwgYmUgcmV0dXJuZWQgYXMgZGlzYWJsZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydpT1MnXSB9KVxuICBnZXRSZW1vdGVOb3RpZmljYXRpb25UeXBlcygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGFwcGxpY2F0aW9uIGlzIGF1dGhvcml6ZWQgdG8gdXNlIHJlbWluZGVycy5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydpT1MnXSB9KVxuICBpc1JlbWluZGVyc0F1dGhvcml6ZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHJlbWluZGVycyBhdXRob3JpemF0aW9uIHN0YXR1cyBmb3IgdGhlIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJ10gfSlcbiAgZ2V0UmVtaW5kZXJzQXV0aG9yaXphdGlvblN0YXR1cygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0cyByZW1pbmRlcnMgYXV0aG9yaXphdGlvbiBmb3IgdGhlIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJ10gfSlcbiAgcmVxdWVzdFJlbWluZGVyc0F1dGhvcml6YXRpb24oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBhcHBsaWNhdGlvbiBpcyBhdXRob3JpemVkIGZvciBiYWNrZ3JvdW5kIHJlZnJlc2guXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJ10gfSlcbiAgaXNCYWNrZ3JvdW5kUmVmcmVzaEF1dGhvcml6ZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGJhY2tncm91bmQgcmVmcmVzaCBhdXRob3JpemF0aW9uIHN0YXR1cyBmb3IgdGhlIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJ10gfSlcbiAgZ2V0QmFja2dyb3VuZFJlZnJlc2hTdGF0dXMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdHMgQmx1ZXRvb3RoIGF1dGhvcml6YXRpb24gZm9yIHRoZSBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogTGVhcm4gbW9yZSBhYm91dCB0aGlzIG1ldGhvZCBbaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL2RwYTk5Yy9jb3Jkb3ZhLWRpYWdub3N0aWMtcGx1Z2luI3JlcXVlc3RibHVldG9vdGhhdXRob3JpemF0aW9uKVxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJ10gfSlcbiAgcmVxdWVzdEJsdWV0b290aEF1dGhvcml6YXRpb24oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIG1vdGlvbiB0cmFja2luZyBpcyBhdmFpbGFibGUgb24gdGhlIGN1cnJlbnQgZGV2aWNlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ2lPUyddIH0pXG4gIGlzTW90aW9uQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgaXQncyBwb3NzaWJsZSB0byBkZXRlcm1pbmUgdGhlIG91dGNvbWUgb2YgYSBtb3Rpb24gYXV0aG9yaXphdGlvbiByZXF1ZXN0IG9uIHRoZSBjdXJyZW50IGRldmljZS5cbiAgICogVGhlcmUncyBubyBkaXJlY3Qgd2F5IHRvIGRldGVybWluZSBpZiBhdXRob3JpemF0aW9uIHdhcyBncmFudGVkIG9yIGRlbmllZCwgc28gdGhlIFBlZG9tZXRlciBBUEkgbXVzdCBiZSB1c2VkIHRvIGluZGlyZWN0bHkgZGV0ZXJtaW5lIHRoaXM6XG4gICAqIHRoZXJlZm9yZSwgaWYgdGhlIGRldmljZSBzdXBwb3J0cyBtb3Rpb24gdHJhY2tpbmcgYnV0IG5vdCBQZWRvbWV0ZXIgRXZlbnQgVHJhY2tpbmcsIHRoZSBvdXRjb21lIG9mIHJlcXVlc3RpbmcgbW90aW9uIGRldGVjdGlvbiBjYW5ub3QgYmUgZGV0ZXJtaW5lZC5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydpT1MnXSB9KVxuICBpc01vdGlvblJlcXVlc3RPdXRjb21lQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0cyBtb3Rpb24gdHJhY2tpbmcgYXV0aG9yaXphdGlvbiBmb3IgdGhlIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBMZWFybiBtb3JlIGFib3V0IHRoaXMgbWV0aG9kIFtoZXJlXShodHRwczovL2dpdGh1Yi5jb20vZHBhOTljL2NvcmRvdmEtZGlhZ25vc3RpYy1wbHVnaW4jcmVxdWVzdG1vdGlvbmF1dGhvcml6YXRpb24pXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydpT1MnXSB9KVxuICByZXF1ZXN0TW90aW9uQXV0aG9yaXphdGlvbigpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgbW90aW9uIGF1dGhvcml6YXRpb24gc3RhdHVzIGZvciB0aGUgYXBwbGljYXRpb24uXG4gICAqXG4gICAqIExlYXJuIG1vcmUgYWJvdXQgdGhpcyBtZXRob2QgW2hlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9kcGE5OWMvY29yZG92YS1kaWFnbm9zdGljLXBsdWdpbiNnZXRtb3Rpb25hdXRob3JpemF0aW9uc3RhdHVzKVxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJ10gfSlcbiAgZ2V0TW90aW9uQXV0aG9yaXphdGlvblN0YXR1cygpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsb2NhdGlvbiBhY2N1cmFjeSBhdXRob3JpemF0aW9uIGZvciB0aGUgYXBwbGljYXRpb24gb24gaU9TIDE0KyBhbmQgQW5kcm9pZCAxMisuIE5vdGU6IGNhbGxpbmcgb24gaU9TIDwxNCBvciBBbmRyb2lkIDwxMiB3aWxsIGFsd2F5cyByZXR1cm4gY29yZG92YS5wbHVnaW5zLmRpYWdub3N0aWMubG9jYXRpb25BY2N1cmFjeUF1dGhvcml6YXRpb24uRlVMTFxuICAgKlxuICAgKiBMZWFybiBtb3JlIGFib3V0IHRoaXMgbWV0aG9kIFtoZXJlXShodHRwczovL2dpdGh1Yi5jb20vZHBhOTljL2NvcmRvdmEtZGlhZ25vc3RpYy1wbHVnaW4jZ2V0bG9jYXRpb25hY2N1cmFjeWF1dGhvcml6YXRpb24pXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICBAQ29yZG92YSh7IHBsYXRmb3JtczogWydpT1MnLCAnQW5kcm9pZCddIH0pXG4gIGdldExvY2F0aW9uQWNjdXJhY3lBdXRob3JpemF0aW9uKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3RzIHRlbXBvcmFyeSBhY2Nlc3MgdG8gZnVsbCBsb2NhdGlvbiBhY2N1cmFjeSBmb3IgdGhlIGFwcGxpY2F0aW9uIG9uIGlPUyAxNCsuXG4gICAqXG4gICAqIExlYXJuIG1vcmUgYWJvdXQgdGhpcyBtZXRob2QgW2hlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9kcGE5OWMvY29yZG92YS1kaWFnbm9zdGljLXBsdWdpbiNyZXF1ZXN0dGVtcG9yYXJ5ZnVsbGFjY3VyYWN5YXV0aG9yaXphdGlvbilcbiAgICpcbiAgICogQHBhcmFtIHB1cnBvc2VcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ2lPUyddIH0pXG4gIHJlcXVlc3RUZW1wb3JhcnlGdWxsQWNjdXJhY3lBdXRob3JpemF0aW9uKHB1cnBvc2U6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIGEgY2hhbmdlIGluIGxvY2F0aW9uIGFjY3VyYWN5IGF1dGhvcml6YXRpb24gb2NjdXJzIG9uIGlPUyAxNCsuXG4gICAqXG4gICAqIExlYXJuIG1vcmUgYWJvdXQgdGhpcyBtZXRob2QgW2hlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9kcGE5OWMvY29yZG92YS1kaWFnbm9zdGljLXBsdWdpbiNyZWdpc3RlckxvY2F0aW9uQWNjdXJhY3lBdXRob3JpemF0aW9uQ2hhbmdlSGFuZGxlcilcbiAgICpcbiAgICogQHBhcmFtIGhhbmRsZXJcbiAgICovXG4gIEBDb3Jkb3ZhKHsgcGxhdGZvcm1zOiBbJ2lPUyddLCBzeW5jOiB0cnVlIH0pXG4gIHJlZ2lzdGVyTG9jYXRpb25BY2N1cmFjeUF1dGhvcml6YXRpb25DaGFuZ2VIYW5kbGVyKGhhbmRsZXI6IEZ1bmN0aW9uKTogdm9pZCB7fVxufVxuIl19